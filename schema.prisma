generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  emailVerified DateTime?
  fullName      String
  role          Role      @default(STUDENT)

  // optional identification fields
  nim        String?
  nip        String?
  department String?
  bio        String?
  avatarUrl  String?

  isConversationLocked Boolean   @default(false)
  nextOpenTime         DateTime?

  // relations
  teacher   User?   @relation("TeacherStudents", fields: [teacherId], references: [id])
  teacherId String?
  students  User[]  @relation("TeacherStudents")

  modules       Module[]       @relation("author_modules")
  moduleFiles   ModuleFile[]   @relation("uploader_module_files")
  notifications Notification[]
  conversations Conversation[] @relation("conversation_users")
  messages      Message[]      @relation("user_messages")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Module {
  id          String           @id @default(uuid())
  title       String
  slug        String           @unique
  description String?
  visibility  ModuleVisibility @default(OPEN)
  author      User             @relation("author_modules", fields: [authorId], references: [id])
  authorId    String
  files       ModuleFile[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([authorId])
}

model ModuleFile {
  id           String   @id @default(uuid())
  module       Module   @relation(fields: [moduleId], references: [id])
  moduleId     String
  url          String
  filename     String
  uploadedById String?
  uploadedBy   User?    @relation("uploader_module_files", fields: [uploadedById], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([moduleId])
}

model Conversation {
  id       String    @id @default(uuid())
  users    User[]    @relation("conversation_users")
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id             String             @id @default(uuid())
  conversation   Conversation       @relation(fields: [conversationId], references: [id])
  conversationId String
  sender         User               @relation("user_messages", fields: [senderId], references: [id])
  senderId       String
  content        String?
  contentType    MessageContentType @default(TEXT)
  attachment     String?
  readAt         DateTime? // null = belum dibaca
  edited         Boolean            @default(false)
  deleted        Boolean            @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([conversationId, createdAt])
  @@index([senderId, createdAt])
}

model Notification {
  id               String           @id @default(uuid())
  user             User             @relation(fields: [userId], references: [id])
  userId           String
  title            String
  content          String?
  notificationType NotificationType @default(OTHER)
  read             Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([userId])
}

enum Role {
  STUDENT
  LECTURER
  ADMIN
}

enum ModuleVisibility {
  OPEN
  RESTRICTED
}

enum MessageContentType {
  TEXT
  IMAGE
  FILE
  OTHER
}

enum NotificationType {
  ASSIGNMENT
  MESSAGES
  ANNOUNCEMENT
  MODULE_UPDATE
  OTHER
}
