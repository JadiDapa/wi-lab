generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  emailVerified    DateTime?
  fullName         String
  role             Role           @default(STUDENT)
  // optional identification fields
  nim              String? // untuk mahasiswa
  nip              String? // untuk dosen/widyaiswara
  department       String? // jurusan / unit
  bio              String?
  avatarUrl        String?
  // relations
  modules          Module[]       @relation("author_modules")
  moduleFiles      ModuleFile[]   @relation("uploader_module_files")
  notifications    Notification[]
  sentMessages     Message[]      @relation("message_sender")
  receivedMessages Message[]      @relation("message_recipient")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Module {
  id          String           @id @default(uuid())
  title       String
  slug        String           @unique
  description String?
  visibility  ModuleVisibility @default(OPEN)
  // tags        String[]         @default([])
  author      User             @relation("author_modules", fields: [authorId], references: [id])
  authorId    String
  files       ModuleFile[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([authorId])
}

model ModuleFile {
  id           String   @id @default(uuid())
  module       Module   @relation(fields: [moduleId], references: [id])
  moduleId     String
  url          String
  filename     String
  uploadedBy   User?    @relation("uploader_module_files", fields: [uploadedById], references: [id])
  uploadedById String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([moduleId])
}

model Message {
  id          String             @id @default(uuid())
  sender      User               @relation("message_sender", fields: [senderId], references: [id])
  senderId    String
  recipient   User               @relation("message_recipient", fields: [recipientId], references: [id])
  recipientId String
  content     String?
  contentType MessageContentType @default(TEXT)
  attachment  String?
  readAt      DateTime? // null = belum dibaca
  edited      Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([senderId, recipientId, createdAt])
  @@index([recipientId, readAt])
}

model Notification {
  id               String           @id @default(uuid())
  user             User             @relation(fields: [userId], references: [id])
  userId           String
  title            String
  content          String?
  notificationType NotificationType @default(OTHER)
  read             Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([userId])
}

enum Role {
  STUDENT
  LECTURER
  ADMIN
}

enum ModuleVisibility {
  OPEN
  RESTRICTED
}

enum MessageContentType {
  TEXT
  IMAGE
  FILE
  OTHER
}

enum NotificationType {
  ASSIGNMENT
  MESSAGES
  ANNOUNCEMENT
  MODULE_UPDATE
  OTHER
}
